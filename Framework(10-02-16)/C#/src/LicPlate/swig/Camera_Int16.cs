/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Camera_Int16 : CameraBase {
  private HandleRef swigCPtr;

  internal Camera_Int16(IntPtr cPtr, bool cMemoryOwn) : base(VisionLabPINVOKE.Camera_Int16_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Camera_Int16 obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Camera_Int16() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          VisionLabPINVOKE.delete_Camera_Int16(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void SnapShot(Int16Image image, int roiNr) {
    VisionLabPINVOKE.Camera_Int16_SnapShot__SWIG_0(swigCPtr, Int16Image.getCPtr(image), roiNr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SnapShot(Int16Image image) {
    VisionLabPINVOKE.Camera_Int16_SnapShot__SWIG_1(swigCPtr, Int16Image.getCPtr(image));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Image SnapShot(int roiNr) {
    IntPtr cPtr = VisionLabPINVOKE.Camera_Int16_SnapShot__SWIG_2(swigCPtr, roiNr);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Image SnapShot() {
    IntPtr cPtr = VisionLabPINVOKE.Camera_Int16_SnapShot__SWIG_3(swigCPtr);
    Image ret = (cPtr == IntPtr.Zero) ? null : new Image(cPtr, false);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__Image_p_t SnapShotROIs() {
    SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__Image_p_t ret = new SWIGTYPE_p_std__vectorT_JL_VisionLib_V3__Image_p_t(VisionLabPINVOKE.Camera_Int16_SnapShotROIs__SWIG_0(swigCPtr), true);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SnapShotROIs(vector_Int16Image images) {
    VisionLabPINVOKE.Camera_Int16_SnapShotROIs__SWIG_1(swigCPtr, vector_Int16Image.getCPtr(images));
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string GetImageType() {
    string ret = VisionLabPINVOKE.Camera_Int16_GetImageType(swigCPtr);
    if (VisionLabPINVOKE.SWIGPendingException.Pending) throw VisionLabPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
